{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../src/connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArangoError, HttpError } from \"./error\";\nimport {\n  ArangojsResponse,\n  RequestFunction,\n  createRequest,\n  isBrowser\n} from \"./util/request\";\n\nimport { Route } from \"./route\";\nimport { byteLength } from \"./util/bytelength\";\nimport { stringify as querystringify } from \"querystring\";\n\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\n\nexport type LoadBalancingStrategy = \"NONE\" | \"ROUND_ROBIN\" | \"ONE_RANDOM\";\n\ntype UrlInfo = {\n  absolutePath?: boolean;\n  basePath?: string;\n  path?: string;\n  qs?: string | { [key: string]: any };\n};\n\nexport type RequestOptions = {\n  host?: number;\n  method?: string;\n  body?: any;\n  expectBinary?: boolean;\n  isBinary?: boolean;\n  isJsonStream?: boolean;\n  headers?: { [key: string]: string };\n  absolutePath?: boolean;\n  basePath?: string;\n  path?: string;\n  qs?: string | { [key: string]: any };\n};\n\ntype Task = {\n  host?: number;\n  resolve: Function;\n  reject: Function;\n  options: {\n    method: string;\n    expectBinary: boolean;\n    url: { pathname: string; search?: string };\n    headers: { [key: string]: string };\n    body: any;\n  };\n};\n\nexport type Config =\n  | string\n  | string[]\n  | Partial<{\n      url: string | string[];\n      isAbsolute: boolean;\n      arangoVersion: number;\n      loadBalancingStrategy: LoadBalancingStrategy;\n      agent: Function;\n      agentOptions: { [key: string]: any };\n      headers: { [key: string]: string };\n    }>;\n\nexport class Connection {\n  private _activeTasks: number = 0;\n  private _agent?: Function;\n  private _agentOptions: { [key: string]: any };\n  private _arangoVersion: number = 30000;\n  private _databaseName: string | false = \"_system\";\n  private _headers: { [key: string]: string };\n  private _loadBalancingStrategy: LoadBalancingStrategy;\n  private _useFailOver: boolean;\n  private _maxTasks: number;\n  private _queue: Task[] = [];\n  private _hosts: RequestFunction[] = [];\n  private _urls: string[] = [];\n  private _activeHost: number;\n\n  constructor(config: Config = {}) {\n    if (typeof config === \"string\") config = { url: config };\n    else if (Array.isArray(config)) config = { url: config };\n\n    if (config.arangoVersion !== undefined) {\n      this._arangoVersion = config.arangoVersion;\n    }\n    if (config.isAbsolute) {\n      this._databaseName = false;\n    }\n    this._agent = config.agent;\n    this._agentOptions = isBrowser\n      ? { ...config.agentOptions! }\n      : {\n          maxSockets: 3,\n          keepAlive: true,\n          keepAliveMsecs: 1000,\n          ...config.agentOptions\n        };\n    this._maxTasks = this._agentOptions.maxSockets || 3;\n    if (this._agentOptions.keepAlive) this._maxTasks *= 2;\n\n    this._headers = { ...config.headers };\n    this._loadBalancingStrategy = config.loadBalancingStrategy || \"NONE\";\n    this._useFailOver = this._loadBalancingStrategy !== \"ROUND_ROBIN\";\n\n    const urls = config.url\n      ? Array.isArray(config.url) ? config.url : [config.url]\n      : [\"http://localhost:8529\"];\n    this.addToHostList(urls);\n\n    if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n      this._activeHost = Math.floor(Math.random() * this._hosts.length);\n    } else {\n      this._activeHost = 0;\n    }\n  }\n\n  private get _databasePath() {\n    return this._databaseName === false ? \"\" : `/_db/${this._databaseName}`;\n  }\n\n  private _runQueue() {\n    if (!this._queue.length || this._activeTasks >= this._maxTasks) return;\n    const task = this._queue.shift()!;\n    let host = this._activeHost;\n    if (task.host !== undefined) {\n      host = task.host;\n    } else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n      this._activeHost = (this._activeHost + 1) % this._hosts.length;\n    }\n    this._activeTasks += 1;\n    this._hosts[host](task.options, (err, res) => {\n      this._activeTasks -= 1;\n      if (err) {\n        if (\n          this._hosts.length > 1 &&\n          this._activeHost === host &&\n          this._useFailOver\n        ) {\n          this._activeHost = (this._activeHost + 1) % this._hosts.length;\n        }\n        task.reject(err);\n      } else {\n        const response = res!;\n        if (\n          response.statusCode === 503 &&\n          response.headers[LEADER_ENDPOINT_HEADER]\n        ) {\n          const url = response.headers[LEADER_ENDPOINT_HEADER]!;\n          const [index] = this.addToHostList(url);\n          task.host = index;\n          if (this._activeHost === host) {\n            this._activeHost = index;\n          }\n          this._queue.push(task);\n        } else {\n          response.host = host;\n          task.resolve(response);\n        }\n      }\n      this._runQueue();\n    });\n  }\n\n  private _buildUrl({ absolutePath = false, basePath, path, qs }: UrlInfo) {\n    let pathname = \"\";\n    let search;\n    if (!absolutePath) {\n      pathname = this._databasePath;\n      if (basePath) pathname += basePath;\n    }\n    if (path) pathname += path;\n    if (qs) {\n      if (typeof qs === \"string\") search = `?${qs}`;\n      else search = `?${querystringify(qs)}`;\n    }\n    return search ? { pathname, search } : { pathname };\n  }\n\n  private _sanitizeEndpointUrl(url: string): string {\n    if (url.startsWith(\"tcp:\")) return url.replace(/^tcp:/, \"http:\");\n    if (url.startsWith(\"ssl:\")) return url.replace(/^ssl:/, \"https:\");\n    return url;\n  }\n\n  addToHostList(urls: string | string[]): number[] {\n    const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map(url =>\n      this._sanitizeEndpointUrl(url)\n    );\n    const newUrls = cleanUrls.filter(url => this._urls.indexOf(url) === -1);\n    this._urls.push(...newUrls);\n    this._hosts.push(\n      ...newUrls.map((url: string) =>\n        createRequest(url, this._agentOptions, this._agent)\n      )\n    );\n    return cleanUrls.map(url => this._urls.indexOf(url));\n  }\n\n  get arangoMajor() {\n    return Math.floor(this._arangoVersion / 10000);\n  }\n\n  getDatabaseName() {\n    return this._databaseName;\n  }\n\n  getActiveHost() {\n    return this._activeHost;\n  }\n\n  setDatabaseName(databaseName: string) {\n    if (this._databaseName === false) {\n      throw new Error(\"Can not change database from absolute URL\");\n    }\n    this._databaseName = databaseName;\n  }\n\n  setHeader(key: string, value: string) {\n    this._headers[key] = value;\n  }\n\n  route(path?: string, headers?: Object) {\n    return new Route(this, path, headers);\n  }\n\n  request({\n    host,\n    method = \"GET\",\n    body,\n    expectBinary = false,\n    isBinary = false,\n    isJsonStream = false,\n    headers,\n    ...urlInfo\n  }: RequestOptions) {\n    let contentType = \"text/plain\";\n    if (isBinary) {\n      contentType = \"application/octet-stream\";\n    } else if (body) {\n      if (typeof body === \"object\") {\n        if (isJsonStream) {\n          body =\n            body.map((obj: any) => JSON.stringify(obj)).join(\"\\r\\n\") + \"\\r\\n\";\n          contentType = \"application/x-ldjson\";\n        } else {\n          body = JSON.stringify(body);\n          contentType = \"application/json\";\n        }\n      } else {\n        body = String(body);\n      }\n    }\n\n    const extraHeaders: { [key: string]: string } = {\n      ...this._headers,\n      \"content-type\": contentType,\n      \"x-arango-version\": String(this._arangoVersion)\n    };\n\n    if (!isBrowser) {\n      // Node doesn't set content-length but ArangoDB needs it\n      extraHeaders[\"content-length\"] = String(\n        body ? byteLength(body, \"utf-8\") : 0\n      );\n    }\n\n    return new Promise<ArangojsResponse>((resolve, reject) => {\n      this._queue.push({\n        host,\n        options: {\n          url: this._buildUrl(urlInfo),\n          headers: { ...extraHeaders, ...headers },\n          method,\n          expectBinary,\n          body\n        },\n        reject,\n        resolve: (res: ArangojsResponse) => {\n          const contentType = res.headers[\"content-type\"];\n          let parsedBody: any = {};\n          if (contentType && contentType.match(MIME_JSON)) {\n            try {\n              if (res.body && expectBinary) {\n                parsedBody = (res.body as Buffer).toString(\"utf-8\");\n              } else {\n                parsedBody = (res.body as string) || \"\";\n              }\n              parsedBody = JSON.parse(parsedBody);\n            } catch (e) {\n              if (!expectBinary) {\n                e.response = res;\n                reject(e);\n                return;\n              }\n            }\n          }\n          if (\n            parsedBody &&\n            parsedBody.hasOwnProperty(\"error\") &&\n            parsedBody.hasOwnProperty(\"code\") &&\n            parsedBody.hasOwnProperty(\"errorMessage\") &&\n            parsedBody.hasOwnProperty(\"errorNum\")\n          ) {\n            res.body = parsedBody;\n            reject(new ArangoError(res));\n          } else if (res.statusCode && res.statusCode >= 400) {\n            res.body = parsedBody;\n            reject(new HttpError(res));\n          } else {\n            if (!expectBinary) res.body = parsedBody;\n            resolve(res);\n          }\n        }\n      });\n      this._runQueue();\n    });\n  }\n}\n"]}
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const cursor_1 = require("./cursor");
var Types;
(function (Types) {
    Types[Types["DOCUMENT_COLLECTION"] = 2] = "DOCUMENT_COLLECTION";
    Types[Types["EDGE_COLLECTION"] = 3] = "EDGE_COLLECTION";
})(Types = exports.Types || (exports.Types = {}));
function isArangoCollection(collection) {
    return Boolean(collection && collection.isArangoCollection);
}
exports.isArangoCollection = isArangoCollection;
class BaseCollection {
    constructor(connection, name) {
        this.isArangoCollection = true;
        this.name = name;
        this._urlPrefix = `/collection/${this.name}/`;
        this._idPrefix = `${this.name}/`;
        this._connection = connection;
        this._api = this._connection.route("/_api");
        if (this._connection.arangoMajor >= 3) {
            this.first = undefined;
            this.last = undefined;
            this.createCapConstraint = undefined;
        }
    }
    _documentHandle(documentHandle) {
        if (typeof documentHandle !== "string") {
            if (documentHandle._id) {
                return documentHandle._id;
            }
            if (documentHandle._key) {
                return this._idPrefix + documentHandle._key;
            }
            throw new Error("Document handle must be a document or string");
        }
        if (documentHandle.indexOf("/") === -1) {
            return this._idPrefix + documentHandle;
        }
        return documentHandle;
    }
    _indexHandle(indexHandle) {
        if (typeof indexHandle !== "string") {
            if (indexHandle.id) {
                return indexHandle.id;
            }
            throw new Error("Index handle must be a index or string");
        }
        if (indexHandle.indexOf("/") === -1) {
            return this._idPrefix + indexHandle;
        }
        return indexHandle;
    }
    _get(path, qs) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get(this._urlPrefix + path, qs);
            return res.body;
        });
    }
    _put(path, body) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put(this._urlPrefix + path, body);
            return res.body;
        });
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get(`/collection/${this.name}`);
            return res.body;
        });
    }
    create(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.post("/collection", Object.assign({}, properties, { name: this.name, type: this.type }));
            return res.body;
        });
    }
    properties() {
        return this._get("properties");
    }
    count() {
        return this._get("count");
    }
    figures() {
        return this._get("figures");
    }
    revision() {
        return this._get("revision");
    }
    checksum(opts) {
        return this._get("checksum", opts);
    }
    load(count) {
        return this._put("load", typeof count === "boolean" ? { count: count } : undefined);
    }
    unload() {
        return this._put("unload", undefined);
    }
    setProperties(properties) {
        return this._put("properties", properties);
    }
    rename(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put(this._urlPrefix + "rename", { name });
            this.name = name;
            this._idPrefix = `${name}/`;
            this._urlPrefix = `/collection/${name}/`;
            return res.body;
        });
    }
    rotate() {
        return this._put("rotate", undefined);
    }
    truncate() {
        return this._put("truncate", undefined);
    }
    drop(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.delete(`/collection/${this.name}`, opts);
            return res.body;
        });
    }
    replace(documentHandle, newValue, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {};
            if (typeof opts === "string") {
                opts = { rev: opts };
            }
            if (opts.rev && this._connection.arangoMajor >= 3) {
                let rev;
                ({ rev } = opts, opts = __rest(opts, ["rev"]));
                headers["if-match"] = rev;
            }
            const res = yield this._api.put(this._documentPath(documentHandle), newValue, opts, headers);
            return res.body;
        });
    }
    update(documentHandle, newValue, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {};
            if (typeof opts === "string") {
                opts = { rev: opts };
            }
            if (opts.rev && this._connection.arangoMajor >= 3) {
                let rev;
                ({ rev } = opts, opts = __rest(opts, ["rev"]));
                headers["if-match"] = rev;
            }
            const res = yield this._api.patch(this._documentPath(documentHandle), newValue, opts, headers);
            return res.body;
        });
    }
    bulkUpdate(newValues, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.patch(`/document/${this.name}`, newValues, opts);
            return res.body;
        });
    }
    remove(documentHandle, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {};
            if (typeof opts === "string") {
                opts = { rev: opts };
            }
            if (opts.rev && this._connection.arangoMajor >= 3) {
                let rev;
                ({ rev } = opts, opts = __rest(opts, ["rev"]));
                headers["if-match"] = rev;
            }
            const res = yield this._api.delete(this._documentPath(documentHandle), opts, headers);
            return res.body;
        });
    }
    list(type = "id") {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._connection.arangoMajor <= 2) {
                const res = yield this._api.get("/document", {
                    type,
                    collection: this.name
                });
                return res.body.documents;
            }
            const res = yield this._api.put("/simple/all-keys", {
                type,
                collection: this.name
            });
            return res.body.result;
        });
    }
    all(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/all", Object.assign({}, opts, { collection: this.name }));
            return new cursor_1.ArrayCursor(this._connection, res.body, res.host);
        });
    }
    any() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/any", { collection: this.name });
            return res.body.document;
        });
    }
    first(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof opts === "number") {
                opts = { count: opts };
            }
            const res = yield this._api.put("/simple/first", Object.assign({}, opts, { collection: this.name }));
            return res.body.result;
        });
    }
    last(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof opts === "number") {
                opts = { count: opts };
            }
            const res = yield this._api.put("/simple/last", Object.assign({}, opts, { collection: this.name }));
            return res.body.result;
        });
    }
    byExample(example, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/by-example", Object.assign({}, opts, { example, collection: this.name }));
            return new cursor_1.ArrayCursor(this._connection, res.body, res.host);
        });
    }
    firstExample(example) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/first-example", {
                example,
                collection: this.name
            });
            return res.body.document;
        });
    }
    removeByExample(example, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/remove-by-example", Object.assign({}, opts, { example, collection: this.name }));
            return res.body;
        });
    }
    replaceByExample(example, newValue, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/replace-by-example", Object.assign({}, opts, { example,
                newValue, collection: this.name }));
            return res.body;
        });
    }
    updateByExample(example, newValue, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/update-by-example", Object.assign({}, opts, { example,
                newValue, collection: this.name }));
            return res.body;
        });
    }
    lookupByKeys(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/lookup-by-keys", {
                keys,
                collection: this.name
            });
            return res.body.documents;
        });
    }
    removeByKeys(keys, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/simple/remove-by-keys", {
                options,
                keys,
                collection: this.name
            });
            return res.body;
        });
    }
    import(data, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.request({
                method: "POST",
                path: "/import",
                body: data,
                isJsonStream: Boolean(!opts || opts.type !== "array"),
                qs: Object.assign({ type: "auto" }, opts, { collection: this.name })
            });
            return res.body;
        });
    }
    indexes() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/index", { collection: this.name });
            return res.body.indexes;
        });
    }
    index(indexHandle) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get(`/index/${this._indexHandle(indexHandle)}`);
            return res.body;
        });
    }
    createIndex(details) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.post("/index", details, {
                collection: this.name
            });
            return res.body;
        });
    }
    dropIndex(indexHandle) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.delete(`/index/${this._indexHandle(indexHandle)}`);
            return res.body;
        });
    }
    createCapConstraint(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof opts === "number") {
                opts = { size: opts };
            }
            const res = yield this._api.post("/index", Object.assign({}, opts, { type: "cap" }), { collection: this.name });
            return res.body;
        });
    }
    createHashIndex(fields, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof fields === "string") {
                fields = [fields];
            }
            if (typeof opts === "boolean") {
                opts = { unique: opts };
            }
            const res = yield this._api.post("/index", Object.assign({ unique: false }, opts, { type: "hash", fields: fields }), { collection: this.name });
            return res.body;
        });
    }
    createSkipList(fields, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof fields === "string") {
                fields = [fields];
            }
            if (typeof opts === "boolean") {
                opts = { unique: opts };
            }
            const res = yield this._api.post("/index", Object.assign({ unique: false }, opts, { type: "skiplist", fields: fields }), { collection: this.name });
            return res.body;
        });
    }
    createPersistentIndex(fields, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof fields === "string") {
                fields = [fields];
            }
            if (typeof opts === "boolean") {
                opts = { unique: opts };
            }
            const res = yield this._api.post("/index", Object.assign({ unique: false }, opts, { type: "persistent", fields: fields }), { collection: this.name });
            return res.body;
        });
    }
    createGeoIndex(fields, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof fields === "string") {
                fields = [fields];
            }
            const res = yield this._api.post("/index", Object.assign({}, opts, { fields, type: "geo" }), { collection: this.name });
            return res.body;
        });
    }
    createFulltextIndex(fields, minLength) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof fields === "string") {
                fields = [fields];
            }
            const res = yield this._api.post("/index", { fields, minLength, type: "fulltext" }, { collection: this.name });
            return res.body;
        });
    }
    fulltext(attribute, query, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (opts.index)
                opts.index = this._indexHandle(opts.index);
            const res = yield this._api.put("/simple/fulltext", Object.assign({}, opts, { attribute,
                query, collection: this.name }));
            return new cursor_1.ArrayCursor(this._connection, res.body, res.host);
        });
    }
}
exports.BaseCollection = BaseCollection;
class DocumentCollection extends BaseCollection {
    constructor(connection, name) {
        super(connection, name);
        this.type = Types.DOCUMENT_COLLECTION;
    }
    _documentPath(documentHandle) {
        return `/document/${this._documentHandle(documentHandle)}`;
    }
    document(documentHandle) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get(this._documentPath(documentHandle));
            return res.body;
        });
    }
    save(data, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof opts === "boolean") {
                opts = { returnNew: opts };
            }
            if (this._connection.arangoMajor <= 2) {
                const res = yield this._api.post(`/document`, data, Object.assign({}, opts, { collection: this.name }));
                return res.body;
            }
            const res = yield this._api.post(`/document/${this.name}`, data, opts);
            return res.body;
        });
    }
}
exports.DocumentCollection = DocumentCollection;
class EdgeCollection extends BaseCollection {
    constructor(connection, name) {
        super(connection, name);
        this.type = Types.EDGE_COLLECTION;
    }
    _documentPath(documentHandle) {
        if (this._connection.arangoMajor < 3) {
            return `edge/${this._documentHandle(documentHandle)}`;
        }
        return `document/${this._documentHandle(documentHandle)}`;
    }
    edge(documentHandle) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get(this._documentPath(documentHandle));
            return res.body;
        });
    }
    save(data, fromId, toId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (fromId !== undefined) {
                data._from = this._documentHandle(fromId);
                data._to = this._documentHandle(toId);
            }
            if (this._connection.arangoMajor <= 2) {
                const res = yield this._api.post("/edge", data, {
                    collection: this.name,
                    from: data._from,
                    to: data._to
                });
                return res.body;
            }
            const res = yield this._api.post("/document", data, {
                collection: this.name
            });
            return res.body;
        });
    }
    _edges(documentHandle, direction) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get(`/edges/${this.name}`, {
                direction,
                vertex: this._documentHandle(documentHandle)
            });
            return res.body.edges;
        });
    }
    edges(vertex) {
        return this._edges(vertex, undefined);
    }
    inEdges(vertex) {
        return this._edges(vertex, "in");
    }
    outEdges(vertex) {
        return this._edges(vertex, "out");
    }
    traversal(startVertex, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.post("/traversal", Object.assign({}, opts, { startVertex, edgeCollection: this.name }));
            return res.body.result;
        });
    }
}
exports.EdgeCollection = EdgeCollection;
function constructCollection(connection, data) {
    const Collection = data.type === Types.EDGE_COLLECTION ? EdgeCollection : DocumentCollection;
    return new Collection(connection, data.name);
}
exports.constructCollection = constructCollection;
//# sourceMappingURL=collection.js.map
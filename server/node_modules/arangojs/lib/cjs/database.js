"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const aql_query_1 = require("./aql-query");
const collection_1 = require("./collection");
const connection_1 = require("./connection");
const cursor_1 = require("./cursor");
const graph_1 = require("./graph");
const btoa_1 = require("./util/btoa");
const multipart_1 = require("./util/multipart");
function colToString(collection) {
    if (collection_1.isArangoCollection(collection)) {
        return String(collection.name);
    }
    else
        return String(collection);
}
class Database {
    constructor(config) {
        this._connection = new connection_1.Connection(config);
        this._api = this._connection.route("/_api");
        this.useBasicAuth();
    }
    get name() {
        return this._connection.getDatabaseName() || null;
    }
    route(path, headers) {
        return this._connection.route(path, headers);
    }
    acquireHostList() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._connection.getDatabaseName()) {
                throw new Error("Cannot acquire host list with absolute URL");
            }
            const res = yield this._api.request({
                path: "/_api/cluster/endpoints"
            });
            const urls = res.body.endpoints.map((endpoint) => endpoint.endpoint);
            this._connection.addToHostList(urls);
        });
    }
    // Database manipulation
    useDatabase(databaseName) {
        this._connection.setDatabaseName(databaseName);
        return this;
    }
    useBearerAuth(token) {
        this._connection.setHeader("authorization", `Bearer ${token}`);
        return this;
    }
    useBasicAuth(username = "root", password = "") {
        this._connection.setHeader("authorization", `Basic ${btoa_1.btoa(`${username}:${password}`)}`);
        return this;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/database/current");
            return res.body.result;
        });
    }
    createDatabase(databaseName, users) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.post("/database", {
                users,
                name: databaseName
            });
            return res.body;
        });
    }
    listDatabases() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/database");
            return res.body.result;
        });
    }
    listUserDatabases() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/database/user");
            return res.body.result;
        });
    }
    dropDatabase(databaseName) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.delete(`/database/${databaseName}`);
            return res.body;
        });
    }
    // Collection manipulation
    collection(collectionName) {
        return new collection_1.DocumentCollection(this._connection, collectionName);
    }
    edgeCollection(collectionName) {
        return new collection_1.EdgeCollection(this._connection, collectionName);
    }
    listCollections(excludeSystem = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/collection", { excludeSystem });
            if (this._connection.arangoMajor <= 2) {
                return res.body.collections;
            }
            return res.body.result;
        });
    }
    collections(excludeSystem = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const collections = yield this.listCollections(excludeSystem);
            return collections.map((data) => collection_1.constructCollection(this._connection, data));
        });
    }
    truncate(excludeSystem = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const collections = yield this.listCollections(excludeSystem);
            return yield Promise.all(collections.map((data) => __awaiter(this, void 0, void 0, function* () {
                const res = yield this._api.put(`/collection/${data.name}/truncate`);
                return res.body;
            })));
        });
    }
    // Graph manipulation
    graph(graphName) {
        return new graph_1.Graph(this._connection, graphName);
    }
    listGraphs() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/gharial");
            return res.body.graphs;
        });
    }
    graphs() {
        return __awaiter(this, void 0, void 0, function* () {
            const graphs = yield this.listGraphs();
            return graphs.map((data) => this.graph(data._key));
        });
    }
    transaction(collections, action, params, lockTimeout) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof params === "number") {
                lockTimeout = params;
                params = undefined;
            }
            if (typeof collections === "string") {
                collections = { write: [collections] };
            }
            else if (Array.isArray(collections)) {
                collections = { write: collections.map(colToString) };
            }
            else if (collection_1.isArangoCollection(collections)) {
                collections = { write: colToString(collections) };
            }
            else if (collections && typeof collections === "object") {
                collections = Object.assign({}, collections);
                if (collections.read) {
                    if (!Array.isArray(collections.read)) {
                        collections.read = colToString(collections.read);
                    }
                    else
                        collections.read = collections.read.map(colToString);
                }
                if (collections.write) {
                    if (!Array.isArray(collections.write)) {
                        collections.write = colToString(collections.write);
                    }
                    else
                        collections.write = collections.write.map(colToString);
                }
            }
            const res = yield this._api.post("/transaction", {
                collections,
                action,
                params,
                lockTimeout
            });
            return res.body.result;
        });
    }
    query(query, bindVars, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (aql_query_1.isAqlQuery(query)) {
                opts = bindVars;
                bindVars = query.bindVars;
                query = query.query;
            }
            else if (aql_query_1.isAqlLiteral(query)) {
                query = query.toAQL();
            }
            const res = yield this._api.post("/cursor", Object.assign({}, opts, { query, bindVars }));
            return new cursor_1.ArrayCursor(this._connection, res.body, res.host);
        });
    }
    // Function management
    listFunctions() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/aqlfunction");
            return res.body;
        });
    }
    createFunction(name, code) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.post("/aqlfunction", { name, code });
            return res.body;
        });
    }
    dropFunction(name, group = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.delete(`/aqlfunction/${name}`, { group });
            return res.body;
        });
    }
    // Service management
    listServices() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/foxx");
            return res.body;
        });
    }
    installService(mount, source, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { configuration, dependencies } = opts, qs = __rest(opts, ["configuration", "dependencies"]);
            const req = yield multipart_1.toForm({
                configuration,
                dependencies,
                source
            });
            const res = yield this._api.request({
                method: "POST",
                path: "/foxx",
                body: req.body,
                isBinary: true,
                qs: Object.assign({}, qs, { mount }),
                headers: req.headers
            });
            return res.body;
        });
    }
    upgradeService(mount, source, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { configuration, dependencies } = opts, qs = __rest(opts, ["configuration", "dependencies"]);
            const req = yield multipart_1.toForm({
                configuration,
                dependencies,
                source
            });
            const res = yield this._api.request({
                method: "PATCH",
                path: "/foxx/service",
                body: req.body,
                isBinary: true,
                qs: Object.assign({}, qs, { mount }),
                headers: req.headers
            });
            return res.body;
        });
    }
    replaceService(mount, source, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { configuration, dependencies } = opts, qs = __rest(opts, ["configuration", "dependencies"]);
            const req = yield multipart_1.toForm({
                configuration,
                dependencies,
                source
            });
            const res = yield this._api.request({
                method: "PUT",
                path: "/foxx/service",
                body: req.body,
                isBinary: true,
                qs: Object.assign({}, qs, { mount }),
                headers: req.headers
            });
            return res.body;
        });
    }
    uninstallService(mount, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._api.delete("/foxx/service", Object.assign({}, opts, { mount }));
        });
    }
    getService(mount) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/foxx/service", { mount });
            return res.body;
        });
    }
    getServiceConfiguration(mount, minimal = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/foxx/configuration", { mount, minimal });
            if (!minimal)
                return res.body;
            const values = {};
            for (const key of Object.keys(res.body)) {
                values[key] = res.body[key].current;
            }
            return { values };
        });
    }
    updateServiceConfiguration(mount, cfg, minimal = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.patch("/foxx/configuration", cfg, {
                mount,
                minimal
            });
            const result = res.body;
            if (minimal || !result.values || !result.values.title) {
                return result;
            }
            const res2 = yield this.getServiceConfiguration(mount, minimal);
            const result2 = res2.body;
            if (result.warnings) {
                for (const key of Object.keys(result2)) {
                    result2[key].warning = result.warnings[key];
                }
            }
            return result2;
        });
    }
    replaceServiceConfiguration(mount, cfg, minimal = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/foxx/configuration", cfg, {
                mount,
                minimal
            });
            const result = res.body;
            if (minimal || !result.values || !result.values.title) {
                return result;
            }
            const res2 = yield this.getServiceConfiguration(mount, minimal);
            const result2 = res2.body;
            if (result.warnings) {
                for (const key of Object.keys(result2)) {
                    result2[key].warning = result.warnings[key];
                }
            }
            return result2;
        });
    }
    getServiceDependencies(mount, minimal = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/foxx/dependencies", { mount, minimal });
            if (!minimal)
                return res.body;
            const values = {};
            for (const key of Object.keys(res.body)) {
                values[key] = res.body[key].current;
            }
            return { values };
        });
    }
    updateServiceDependencies(mount, cfg, minimal = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.patch("/foxx/dependencies", cfg, {
                mount,
                minimal
            });
            const result = res.body;
            if (minimal || !result.values || !result.values.title) {
                return result;
            }
            const res2 = yield this.getServiceDependencies(mount, minimal);
            const result2 = res2.body;
            if (result.warnings) {
                for (const key of Object.keys(result2)) {
                    result2[key].warning = result.warnings[key];
                }
            }
            return result2;
        });
    }
    replaceServiceDependencies(mount, cfg, minimal = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.put("/foxx/dependencies", cfg, {
                mount,
                minimal
            });
            const result = res.body;
            if (minimal || !result.values || !result.values.title) {
                return result;
            }
            const res2 = yield this.getServiceDependencies(mount, minimal);
            const result2 = res2.body;
            if (result.warnings) {
                for (const key of Object.keys(result2)) {
                    result2[key].warning = result.warnings[key];
                }
            }
            return result2;
        });
    }
    enableServiceDevelopmentMode(mount) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.post("/foxx/development", undefined, { mount });
            return res.body;
        });
    }
    disableServiceDevelopmentMode(mount) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.delete("/foxx/development", { mount });
            return res.body;
        });
    }
    listServiceScripts(mount) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/foxx/scripts", { mount });
            return res.body;
        });
    }
    runServiceScript(mount, name, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.post(`/foxx/scripts/${name}`, args, { mount });
            return res.body;
        });
    }
    runServiceTests(mount, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.post("/foxx/tests", undefined, Object.assign({}, opts, { mount }));
            return res.body;
        });
    }
    getServiceReadme(mount) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/foxx/readme", { mount });
            return res.body;
        });
    }
    getServiceDocumentation(mount) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.get("/foxx/swagger", { mount });
            return res.body;
        });
    }
    downloadService(mount) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._api.request({
                method: "POST",
                path: "/foxx/download",
                qs: { mount },
                expectBinary: true
            });
            return res.body;
        });
    }
    commitLocalServiceState(replace = false) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._api.post("/foxx/commit", undefined, { replace });
        });
    }
}
exports.Database = Database;
//# sourceMappingURL=database.js.map
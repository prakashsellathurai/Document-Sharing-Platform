{"version":3,"file":"request.node.js","sourceRoot":"","sources":["../../../src/util/request.node.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ClientRequest,\n  Agent as HttpAgent,\n  IncomingMessage,\n  request as httpRequest\n} from \"http\";\nimport { Agent as HttpsAgent, request as httpsRequest } from \"https\";\nimport { Url, parse as parseUrl } from \"url\";\n\nimport { Errback } from \"./types\";\nimport { joinPath } from \"./joinPath\";\n\nexport type ArangojsResponse = IncomingMessage & {\n  body?: any;\n  host?: number;\n};\n\nexport type ArangojsError = Error & {\n  request: ClientRequest;\n};\n\nexport type RequestOptions = {\n  method: string;\n  url: Url;\n  headers: { [key: string]: string };\n  body: any;\n  expectBinary: boolean;\n};\n\nexport type RequestFunction = (\n  opts: RequestOptions,\n  cb: Errback<ArangojsResponse>\n) => void;\n\nexport const isBrowser = false;\n\nexport function createRequest(\n  baseUrl: string,\n  agentOptions: any,\n  agent: any\n): RequestFunction {\n  const baseUrlParts = parseUrl(baseUrl);\n  const isTls = baseUrlParts.protocol === \"https:\";\n  if (!agent) {\n    if (isTls) agent = new HttpsAgent(agentOptions);\n    else agent = new HttpAgent(agentOptions);\n  }\n  return function request(\n    { method, url, headers, body, expectBinary = false }: RequestOptions,\n    cb: Errback<ArangojsResponse>\n  ) {\n    let path = baseUrlParts.pathname\n      ? url.pathname\n        ? joinPath(baseUrlParts.pathname, url.pathname)\n        : baseUrlParts.pathname\n      : url.pathname;\n    const search = url.search\n      ? baseUrlParts.search\n        ? `${baseUrlParts.search}&${url.search.slice(1)}`\n        : url.search\n      : baseUrlParts.search;\n    if (search) path += search;\n    const options: any = { path, method, headers, agent };\n    options.hostname = baseUrlParts.hostname;\n    options.port = baseUrlParts.port;\n    options.auth = baseUrlParts.auth;\n    let callback: Errback<IncomingMessage> = (err, res) => {\n      callback = () => undefined;\n      cb(err, res);\n    };\n    const req = (isTls ? httpsRequest : httpRequest)(\n      options,\n      (res: IncomingMessage) => {\n        const data: Buffer[] = [];\n        res.on(\"data\", chunk => data.push(chunk as Buffer));\n        res.on(\"end\", () => {\n          const result = res as ArangojsResponse;\n          result.body = Buffer.concat(data);\n          if (!expectBinary) {\n            result.body = result.body.toString(\"utf-8\");\n          }\n          callback(null, result);\n        });\n      }\n    );\n    req.on(\"error\", err => {\n      const error = err as ArangojsError;\n      error.request = req;\n      callback(error);\n    });\n    if (body) req.write(body);\n    req.end();\n  };\n}\n"]}
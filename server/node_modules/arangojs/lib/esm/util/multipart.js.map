{"version":3,"file":"multipart.js","sourceRoot":"","sources":["../../../src/util/multipart.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAWlC,MAAM,iBAAiB,MAAc;IACnC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;YAC7B,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACtC,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBACxB,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC;oBAAC,QAAQ,CAAC;gBAClC,EAAE,CAAC,CACD,CAAC,CAAC,KAAK,YAAY,QAAQ,CAAC;oBAC5B,CAAC,CAAC,KAAK,YAAY,MAAM,CAAC,MAAM,CAAC;oBACjC,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,UAAU,CAC3D,CAAC,CAAC,CAAC;oBACD,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAChC,CAAC;gBACD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC1B,CAAC;YACD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAChC,MAAM,IAAI,GAAa,EAAE,CAAC;YAC1B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAa,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACpB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC/B,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBACpC,MAAM,OAAO,GAAG;oBACd,cAAc,EAAE,iCAAiC,QAAQ,EAAE;oBAC3D,gBAAgB,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;iBACtC,CAAC;gBACF,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE;gBACrB,MAAM,CAAC,CAAC,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import Multipart from \"multi-part\";\nimport { Readable } from \"stream\";\n\nexport type Fields = {\n  [key: string]: any;\n};\n\nexport type MultipartRequest = {\n  headers?: { [key: string]: string };\n  body: Buffer | FormData;\n};\n\nexport function toForm(fields: Fields): Promise<MultipartRequest> {\n  return new Promise((resolve, reject) => {\n    try {\n      const form = new Multipart();\n      for (const key of Object.keys(fields)) {\n        let value = fields[key];\n        if (value === undefined) continue;\n        if (\n          !(value instanceof Readable) &&\n          !(value instanceof global.Buffer) &&\n          (typeof value === \"object\" || typeof value === \"function\")\n        ) {\n          value = JSON.stringify(value);\n        }\n        form.append(key, value);\n      }\n      const stream = form.getStream();\n      const bufs: Buffer[] = [];\n      stream.on(\"data\", buf => bufs.push(buf as Buffer));\n      stream.on(\"end\", () => {\n        bufs.push(Buffer.from(\"\\r\\n\"));\n        const body = Buffer.concat(bufs);\n        const boundary = form.getBoundary();\n        const headers = {\n          \"content-type\": `multipart/form-data; boundary=${boundary}`,\n          \"content-length\": String(body.length)\n        };\n        resolve({ body, headers });\n      });\n      stream.on(\"error\", e => {\n        reject(e);\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n"]}